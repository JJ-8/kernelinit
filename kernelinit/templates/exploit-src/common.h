#ifndef _COMMON_H
#define _COMMON_H

#include <stdint.h>
#include <stdio.h>
#include <unistd.h>


typedef uint64_t u64;
typedef uint32_t u32;
typedef uint16_t u16;
typedef uint8_t  u8;
typedef int64_t  s64;
typedef int32_t  s32;
typedef int16_t  s16;
typedef int8_t   s8;


void x64dump(char *buf, u32 num) {
    u64 *buf64 = (u64*)buf;
    printf("[--dump--] start\n");
    for (u32 i = 0; i < num; i++) {
        if (i%2 == 0) {
            printf("%p: ", &buf64[i]);
        }
        printf("0x%016lx    ",buf64[i]);
        if (i%2 == 1 && i+1 != num) {
            printf("\n");
        }
    }
    printf("\n[--dump--] end\n");
}


static void win() {
    char *argv[] = { "/bin/sh", NULL };
    char *envp[] = { NULL };
    puts("[+] win!");
    execve("/bin/sh", argv, envp);
}


u64 user_cs, user_ss, user_rsp, user_rflags;
static void save_state() {
    asm(
        "mov %0, cs\n"
        "mov %1, ss\n"
        "mov %2, rsp\n"
        "pushf\n"
        "pop %3\n"
        : "=r"(user_cs), "=r"(user_ss), "=r"(user_rsp), "=r"(user_rflags)
        :
        : "memory");
}

#endif
